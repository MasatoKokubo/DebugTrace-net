= DebugTrace-net 2.0

link:README_ja.asciidoc[[Japanese]]

*DebugTrace-net 2.0* is a library that outputs trace logs when debugging .NET programs. It based on https://docs.microsoft.com/en-us/dotnet/core/about[.NET Core 3.1]. (It based on https://docs.microsoft.com/en-us/dotnet/standard/net-standard[.NET Standard 2.0] before DebugTrace-net 2.0) +
By embedding `Trace.Enter()` and `Trace.Leave()` at the start and end of methods, you can output the execution status of the program under development to the log.

=== 1. Features

* Automatically outputs invoker's *class name*, *method name*, *source file name* and *line number*.
* *Automatically indents* the log with nesting methods and objects.
* *Automatically breaks* at the output of values.
* Automatically output logs when *changing threads*.
* Uses *reflection* to output objects of classes that do not implement `ToString` method.
* You can customize the output content in `DebugTrace.properties`.
* There are no dependent libraries at run time if you output to the console.
* You can use the following logging library.
    ** https://logging.apache.org/log4net/[log4net]
    ** http://nlog-project.org/[NLog]

=== 2. Install

Search `DebugTrace` packege on NuGet and install it. +
If you output logs using https://logging.apache.org/log4net/[log4net] or http://nlog-project.org/[NLog],
install `DebugTrace.Log4net` or `DebugTrace.NLog` package.

=== 3. How to use

Do the following for debug target and related methods.

. Insert `Trace.Enter()` at the beginning of methods.
. Insert `Trace.Leave()` at the end of methods or just before the `return` statements.
. Insert `Trace.Print("foo", foo)` to output arguments, local variables and return value to the log if necessary.

The following are examples of C# and Visual Basic source used DebugTrace-net methods and the log of when it has been executed.

[source,csharp]
.ReadmeExample.cs
----
using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using static DebugTrace.CSharp; // for Debugging

namespace Readme {
    /// <summary>ReadmeExample1</summary>
    [TestClass]
    public class ReadmeExample1 {
        /// <summary>Example1</summary>
        [TestMethod]
        public void Example1() {
            Trace.Enter(); // for Debugging

            var contacts = new [] {
                new Contact(1, "Akane" , "Apple", new DateTime(1991, 2, 3)),
                new Contact(2, "Yukari", "Apple", new DateTime(1992, 3, 4))
            };
            Trace.Print("contacts", contacts); // for Debugging

            Trace.Leave(); // for Debugging
        }

    }

    /// <summary>Entity</summary>
    public class Entity {
        public int ID;

        public Entity(int id) {
            ID = id;
        }
    }

    /// <summary>ContactBase</summary>
    public class ContactBase : Entity {
        public string FirstName;
        public string LastName;

        public ContactBase(int id, string firstName, string lastName) : base(id) {
            FirstName = firstName; LastName  = lastName ;
        }
    }

    /// <summary>Contact</summary>
    public class Contact : ContactBase {
        public DateTime Birthday;

        public Contact(int id, string firstName, string lastName, DateTime birthday) : base(id, firstName, lastName) {
            Birthday  = birthday ;
        }
    }
}
----

.Console output / C#
----
2020-07-12 16:55:12.409 [05] DebugTrace-net 2.0.2
2020-07-12 16:55:12.411 [05]   logger: DebugTrace.Console+Error
2020-07-12 16:55:12.411 [05]   properties file path: Z:\Develop\C#\DebugTrace\DebugTrace\DebugTraceTest\bin\Debug\netcoreapp3.1\DebugTrace.properties
2020-07-12 16:55:12.413 [05] 
2020-07-12 16:55:12.413 [05] ______________________________ Thread 5 ______________________________
2020-07-12 16:55:12.413 [05] 
2020-07-12 16:55:12.637 [05] Enter Readme.ReadmeExample1.Example1() (ReadmeExamples.cs:16)
2020-07-12 16:55:12.660 [05] | 
2020-07-12 16:55:12.660 [05] | contacts = Readme.Contact[2] {
2020-07-12 16:55:12.660 [05] |   Readme.Contact {
2020-07-12 16:55:12.660 [05] |     ____ Readme.Entity ____
2020-07-12 16:55:12.660 [05] |     ID: 1
2020-07-12 16:55:12.660 [05] |     ____ Readme.ContactBase ____
2020-07-12 16:55:12.660 [05] |     FirstName: (Length:5)"Akane", LastName: (Length:5)"Apple"
2020-07-12 16:55:12.660 [05] |     ____ Readme.Contact ____
2020-07-12 16:55:12.660 [05] |     Birthday: 1991-02-03 00:00:00.0000000
2020-07-12 16:55:12.660 [05] |   },
2020-07-12 16:55:12.660 [05] |   Readme.Contact {
2020-07-12 16:55:12.660 [05] |     ____ Readme.Entity ____
2020-07-12 16:55:12.660 [05] |     ID: 2
2020-07-12 16:55:12.660 [05] |     ____ Readme.ContactBase ____
2020-07-12 16:55:12.660 [05] |     FirstName: (Length:6)"Yukari", LastName: (Length:5)"Apple"
2020-07-12 16:55:12.660 [05] |     ____ Readme.Contact ____
2020-07-12 16:55:12.660 [05] |     Birthday: 1992-03-04 00:00:00.0000000
2020-07-12 16:55:12.660 [05] |   }
2020-07-12 16:55:12.660 [05] | } (ReadmeExamples.cs:22)
2020-07-12 16:55:12.661 [05] | 
2020-07-12 16:55:12.662 [05] Leave Readme.ReadmeExample1.Example1() (ReadmeExamples.cs:24) duration: 00:00:00.0226730
----

[source,vb.net]
.ReadmeExample.vb
----
Imports System.Threading
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports DebugTrace.VisualBasic ' for Debugging

Namespace Readme
    ''' <summary>ReadmeExample1</summary>
    <TestClass()>
    Public Class ReadmeExample1
        ''' <summary>Example1</summary>
        <TestMethod()>
        Public Sub Example1()
            Trace.Enter() ' for Debugging

            Dim contacts = New Contact() {
                New Contact(1, "Akane", "Apple", New DateTime(1991, 2, 3)),
                New Contact(2, "Yukari", "Apple", New DateTime(1992, 3, 4))
            }
            Trace.Print("contacts", contacts) ' for Debugging

            Trace.Leave() ' for Debugging
        End Sub
    End Class

    ''' <summary>Entity</summary>
    Public class Entity
        Public Property Id As Integer

        Public Sub New(id_ As Integer)
            Id = id_
        End Sub
    End Class

    ''' <summary>ContactBase</summary>
    public class ContactBase : Inherits Entity
        Public Property FirstName As String
        Public Property LastName As String

        Public Sub New(id_ As Integer, firstName_ As String, lastName_ As String)
            MyBase.New(id_)
            FirstName = firstName_ : LastName = lastName_
        End Sub
    End Class

    ''' <summary>Contact</summary>
    Public Class Contact : Inherits ContactBase
        Public Birthday As DateTime

        Public Sub New(id_ As Integer, firstName_ As String, lastName_ As String, birthday_ As DateTime)
            MyBase.New(id_, firstName_, lastName_)
            Birthday = birthday_
        End Sub
    End Class
End Namespace
----

.Console output / Visual Basic
----
2020-07-12 16:58:13.872 [05] DebugTrace-net 2.0.2
2020-07-12 16:58:13.874 [05]   logger: DebugTrace.Console+Error
2020-07-12 16:58:13.874 [05]   properties file path: Z:\Develop\C#\DebugTrace\DebugTrace\DebugTraceVBTest\bin\Debug\netcoreapp3.1\DebugTrace.properties
2020-07-12 16:58:13.876 [05] 
2020-07-12 16:58:13.876 [05] ______________________________ Thread 5 ______________________________
2020-07-12 16:58:13.876 [05] 
2020-07-12 16:58:13.936 [05] Enter DebugTraceVBTest.Readme.ReadmeExample1.Example1() (ReadmeExamples.vb:12)
2020-07-12 16:58:13.953 [05] | 
2020-07-12 16:58:13.953 [05] | contacts = DebugTraceVBTest.Readme.Contact(Length: 2) {
2020-07-12 16:58:13.953 [05] |   DebugTraceVBTest.Readme.Contact {
2020-07-12 16:58:13.953 [05] |     ____ DebugTraceVBTest.Readme.Entity ____
2020-07-12 16:58:13.953 [05] |     Id: 1
2020-07-12 16:58:13.953 [05] |     ____ DebugTraceVBTest.Readme.ContactBase ____
2020-07-12 16:58:13.953 [05] |     FirstName: (Length:5)"Akane", LastName: (Length:5)"Apple"
2020-07-12 16:58:13.953 [05] |     ____ DebugTraceVBTest.Readme.Contact ____
2020-07-12 16:58:13.953 [05] |     Birthday: 1991-02-03 00:00:00.0000000
2020-07-12 16:58:13.953 [05] |   },
2020-07-12 16:58:13.953 [05] |   DebugTraceVBTest.Readme.Contact {
2020-07-12 16:58:13.953 [05] |     ____ DebugTraceVBTest.Readme.Entity ____
2020-07-12 16:58:13.953 [05] |     Id: 2
2020-07-12 16:58:13.953 [05] |     ____ DebugTraceVBTest.Readme.ContactBase ____
2020-07-12 16:58:13.953 [05] |     FirstName: (Length:6)"Yukari", LastName: (Length:5)"Apple"
2020-07-12 16:58:13.953 [05] |     ____ DebugTraceVBTest.Readme.Contact ____
2020-07-12 16:58:13.953 [05] |     Birthday: 1992-03-04 00:00:00.0000000
2020-07-12 16:58:13.953 [05] |   }
2020-07-12 16:58:13.953 [05] | } (ReadmeExamples.vb:18)
2020-07-12 16:58:13.953 [05] | 
2020-07-12 16:58:13.957 [05] Leave DebugTraceVBTest.Readme.ReadmeExample1.Example1() (ReadmeExamples.vb:20) duration: 00:00:00.0166311
----

==== 3.1 When using or Imports System.Diagnostics

If you are `using System.Diagnostics` or `Impors System.Diagnostics`, since the `DebugTrace.CSharp.Trace` (`DebugTrace.VisualBaisc.Trace`) property and `System.Diagnostics.Trace` class overlap, use `Trace_`  property instead of `Trace`. +

[source,csharp]
.ReadmeExample.cs
----
using System.Diagnostics;
using static DebugTrace.CSharp; // for Debugging

namespace Readme {
    public class ReadmeExample {
        public static void Main(string[] args) {
            Trace_.Enter(); // for Debugging
----

[source,vb.net]
.ReadmeExample.vb
----
Imports System.Diagnostics
Imports DebugTrace.VisualBasic ' for Debugging

Namespace Global.Readme
    Public Class ReadmeExample
        Public Shared Sub Main(args As String())
            Trace_.Enter() ' for Debugging
----

=== 4. Interfaces and Classes

There are mainly the following interfaces and classes.

[options="header", cols="3,3,4", width="100%"]
.Interfaces and Classes
|===
^s|Name ^s|Super Class or Implemented Interfaces ^s|Description
  |`DebugTrace.ITrace`       |_None_               |Trace processing interface
  |`DebugTrace.TraceBase`    |`DebugTrace.ITrace`  |Trace processing base class
  |`DebugTrace.CSharp`       |`DebugTrace.Trace`   |Trace processing class for C#
  |`DebugTrace.VisualBasic`  |`DebugTrace.Trace`   |Trace processing class for VisualBasic
  |`DebugTrace.ILogger`      |_None_               |Log output interface
  |`DebugTrace.Console`      |`DebugTrace.ILogger` |Abstract super class of `DebugTrace.Console.Out` and `DebugTrace.Console.Error`
  |`DebugTrace.Console.Out`  |`DebugTrace.Console` |Class that outputs logs to standard output
  |`DebugTrace.Console.Error`|`DebugTrace.Console` |Class that outputs logs to standard error output
  |`DebugTrace.Diagnostics` +
[.small .blue]#since 1.6.0#|`DebugTrace.ILogger`    |Abstract super class of `DebugTrace.Diagnostics.Debug` and `DebugTrace.Diagnostics.Trace` class
  |`DebugTrace.Diagnostics.Debug` +
[.small .blue]#since 1.6.0#|`DebugTrace.Diagnostics`|Class that outputs logs using `System.Diagnostics.Debug` class
  |`DebugTrace.Diagnostics.Trace` +
[.small .blue]#since 1.6.0#|`DebugTrace.Diagnostics`|Class that outputs logs using `System.Diagnostics.Trace` class
|===

=== 5. Properties of DebugTrace.CSharp class and DebugTrace.VisualBasic class

`DebugTrace.CSharp` and `DebugTrace.VisualBasic` class has `Trace` and `Trace_` property as an instance of its own type.

=== 6. Properties and methods of ITrace interface

It has the following properties and methods.

[options="header", cols="1,5", width="60%"]
.Properties
|===
^s|Name ^s|Description

|`IsEnabled`
|`true` if log output is enabled, `false` otherwise (`get` only)

|`LastLog`
|Last log string outputted (`get` only)

|===

[options="header", cols="1,4,2,3", width="100%"]
.Methods
|===
^s|Name ^s|Arguments ^s|Return Value ^s|Description

|`ResetNest`
|_None_
|_None_
|Initializes the nesting level for the current thread.

|`Enter`
|_None_
|`int` thread ID
|Outputs method start to log.

|`Leave`
|`int threadId`: the thread ID (default: `-1`)
|_None_
|Outputs method end to the log.

|`Print`
|`string message`: the message
|_None_
|Outputs the message to the log.

|`Print`
|`Func<string> messageSupplier`: the function to return a message
|_None_
|Gets a message from `messageSupplier` and output it to the log.

|`Print`
|`string name`: the value name +
`object value`: the value
|_None_
|Outputs to the log in the form of `"Name = Value"`

|`Print`
|`string name`: the name of the value +
`Func<object> valueSupplier`:  the function to return a value
|_None_
|Gets a value from `valueSupplier` and output it to the log in the form of +
`"Name = Value"`.

|`PrintStack`
[.small .blue]#since 1.6.0#
|`int maxCount`: maximum number of stack elements to output
|_None_
|Outputs call stack to log.

|===

=== 7. Properties of *DebugTrace.properties* file

DebugTrace reads the `DebugTrace.properties` file in the current directory at startup. +
You can specify following properties in the `DebugTrace.properties` file.  

[options="header", cols="2,8", width="100%"]
.DebugTrace.properties
|===
^s|Property Name ^s|Description

|`Logger`
|Logger used by DebugTrace +
[.small]#*Examples:*# +
`Logger = Console+Out` [.small .blue]#- Outputs to the console (stdout)# +
`Logger = Console+Error` [.small .blue]#- Outputs to the console (stderr)# [.small .blue]#*[Default]*# + 
`Logger = Diagnostics+Debug` [.small .blue]#- Outputs using System.Diagnostics.Debug class - since 1.6.0# +
`Logger = Diagnostics+Trace` [.small .blue]#- Outputs using System.Diagnostics.Trace class - since 1.6.0# + 
`Logger = Log4net` [.small .blue]#- Outputs using Log4net# +
`Logger = NLog` [.small .blue]#- Outputs using NLog# +
[.small]#*Example for multiple outputs:*# [.small .blue]#- since 1.5.0# +
`Logger = Console+Out; Log4net` [.small .blue]#- Outputs to the console (stdout) and using Log4net#

|`LogLevel`
|Log level to use when outputting +
[.small]#*Examples when using Log4net:*# +
`LogLevel = All` +
`LogLevel = Finest` +
`LogLevel = Verbose` +
`LogLevel = Finer` +
`LogLevel = Trace` +
`LogLevel = Fine` +
`LogLevel = Debug` [.small .blue]#*[Default]*# +
`LogLevel = Info` +
`LogLevel = Notice` +
`LogLevel = Warn` +
`LogLevel = Error` +
`LogLevel = Severe` +
`LogLevel = Critical` +
`LogLevel = Alert` +
`LogLevel = Fatal` +
`LogLevel = Emergency` +
`LogLevel = Off` +
[.small]#*Examples when using NLog:*# +
`LogLevel = Trace` +
`LogLevel = Debug` [.small .blue]#*[Default]*# +
`LogLevel = Info` +
`LogLevel = Warn` +
`LogLevel = Error` +
`LogLevel = Fatal` +
`LogLevel = Off` +
[.small]#*Examples when using Log4net and NLog:*# [.small .blue]#(Logger = Log4net; NLog)# +
`LogLevel = Debug` [.small .blue]#- Outputs Debug level for both Log4net and NLog# +
`LogLevel = Finer; Trace` [.small .blue]#- Outputs Finer level for Log4net and Trace level for NLog - since 1.5.0#

|`EnterFormat` +
[.small .blue]#Renamed since 2.0.0# +
 +
[.small]#`EnterString`# +
[.small .blue]#Deprecated since 2.0.0#
|The format string of log output when entering methods +
[.small]#*Example:*# +
`EnterFormat = Enter {0}.{1} ({2}:{3:D})` [.small .blue]#*[Default]*# +
[.small]#*Parameters:*# +
`{0}`: The class name +
`{1}`: The method name +
`{2}`: The file name +
`{3}`: The line number

|`LeaveFormat` +
[.small .blue]#Renamed since 2.0.0# +
 +
[.small]#`LeaveString`# +
[.small .blue]#Deprecated since 2.0.0#
|The format string of log output when leaving methods +
[.small]#*Examples:*# +
`LeaveString = Leave {0}.{1} ({2}:{3:D}) duration: {4}` [.small .blue]#*[Default]*# +
[.small]#*Parameters:*# +
`{0}`: The class name +
`{1}`: The method name +
`{2}`: The file name +
`{3}`: The line number +
`{4}`: The duration since invoking the corresponding `Enter` method

|`ThreadBoundaryFormat` +
[.small .blue]#Renamed since 2.0.0# +
 +
[.small]#`ThreadBoundaryString`# +
[.small .blue]#Deprecated since 2.0.0#
|The format string of log output at threads boundary +
[.small]#*Example:*# +
[.small]#`ThreadBoundaryFormat = \____\__\__\__\__\__\__\__\__\__\__\__\__\__ Thread {0} \__\__\__\__\__\__\__\__\__\__\__\__\__\____`# +
[.small .blue]#*[Default]*# +
[.small]#*Parameter:*# +
`{0}`: The thread ID

|`ClassBoundaryFormat` +
[.small .blue]#Renamed since 2.0.0# +
 +
[.small]#`ClassBoundaryString`# +
[.small .blue]#Deprecated since 2.0.0#
|The format string of log output at classes boundary +
[.small]#*Example:*# +
`ClassBoundaryFormat = \\____ {0} \____` [.small .blue]#*[Default]*# +
[.small]#*Parameter:*# +
`{0}`: The class name

|`IndentString` +
[.small .blue]#Renamed since 2.0.0# +
 +
[.small]#`CodeIndentString`# +
[.small .blue]#Deprecated since 2.0.0#
|The indentation string for code +
[.small]#*Example:*# +
`CodeIndentString = &#x7c;\s` [.small .blue]#*[Default]*# +
[.small .blue]#`\s` is replaced to a space character#

|`DataIndentString`
|The indentation string for data +
[.small]#*Example:*# +
`DataIndentString = \s\s` [.small .blue]#*[Default]*# +
[.small .blue]#`\s` is replaced to a space character#

|`LimitString`
|The string to represent that it has exceeded the limit +
[.small]#*Example:*# +
`LimitString = \...` [.small .blue]#*[Default]*#

|`NonOutputString` +
[.small .blue]#Renamed since 2.0.0# +
 +
[.small]#`NonPrintString`# +
[.small .blue]#Deprecated since 2.0.0#
|The string to be output instead of not outputting value +
[.small]#*Example:*# +
`NonOutputString = \***` [.small .blue]#*[Default]*#

|`CyclicReferenceString`
|The string to represent that the cyclic reference occurs +
[.small]#*Example:*# +
`CyclicReferenceString = \*\** Cyclic Reference \***` [.small .blue]#*[Default]*#

|`VarNameValueSeparator`
|The separator string between the variable name and value +
[.small]#*Example:*# +
`VarNameValueSeparator = \s=\s` [.small .blue]#*[Default]*# +
[.small .blue]#`\s` is replaced to a space character#

|`KeyValueSeparator`
|The separator string between the key and value of dictionary +
and between the property/field name and value +
[.small]#*Example:*# +
`KeyValueSeparator = :\s` [.small .blue]#*[Default]*# +
[.small .blue]#`\s` is replaced to a space character#

|`PrintSuffixFormat`
|The format string of `Print` method suffix +
[.small]#*Example:*# +
`PrintSuffixFormat = \s({2}:{3:D})` [.small .blue]#*[Default]*# +
[.small .blue]#`\s` is replaced to a space character# +
[.small]#*Parameters:*# +
`{0}`: The class name +
`{1}`: The method name +
`{2}`: The file name +
`{3}`: The line number

|`CountFormat` +
[.small .blue]#since 1.5.1# 
|The format string of the number of elements of collection +
[.small]#*Examples:*# +
`CountFormat = \sCount:{0}` [.small .blue]#*[Default]*# +
[.small]#*Parameter:*# +
`{0}`: The number of elements +

|`MinimumOutputCount` +
[.small .blue]#since 2.0.0# 
|The minimum value to output the number of elements of collection +
[.small]#*Examples:*# +
`MinimumOutputCount = 5` [.small .blue]#*[Default]*#

|`LengthFormat` +
[.small .blue]#Renamed since 2.0.0# +
 +
[.small]#`StringLengthFormat`# +
[.small .blue]#since 1.5.1# +
[.small .blue]#Deprecated since 2.0.0#
|The format string of the length of string +
[.small]#*Examples:*# +
`StringLengthFormat = (Length:{0})` [.small .blue]#*[Default]*# +
[.small]#*Parameter:*# +
`{0}`: The string length

|`MinimumOutputLength` +
[.small .blue]#since 2.0.0# 
|The minimum value to output the length of string +
[.small]#*Examples:*# +
`MinimumOutputLength = 5` [.small .blue]#*[Default]*# +

|`DateTimeFormat`
|The format string of DateTime +
[.small]#*Examples:*# +
`DateTimeFormat = {0:yyyy-MM-dd HH:mm:ss.fffffffK}` [.small .blue]#*[Default]*# +
[.small]#*Parameter:*# +
`{0}`: The `DateTime` object

|`LogDateTimeFormat` +
|The format string of date and time when outputting logs +
[.small]#*Examples:*# +
`LogDateTimeFormat = {0:yyyy-MM-dd HH:mm:ss.fff} [{1:D2}] {2}` [.small .blue]#*[Default]*# +
[.small]#*Parameter:*# +
`{0}`: The `DateTime` of log output +
`{1}`: The thread ID +
`{2}`: The log contents

|`MaximumDataOutputWidth`
[.small .blue]#Renamed since 2.0.0# +
 +
[.small]#`MaxDataOutputWidth`# +
[.small .blue]#Deprecated since 2.0.0#
|The maximum output width of data +
[.small]#*Example:*# +
`MaximumDataOutputWidth = 70` [.small .blue]#*[Default]*#

|`CollectionLimit`
|The limit value of elements for collection to output +
[.small]#*Example:*# +
`CollectionLimit = 512` [.small .blue]#*[Default]*#

|`StringLimit`
|The limit value of characters for string to output +
[.small]#*Example:*# +
`StringLimit = 8192` [.small .blue]#*[Default]*#

|`ReflectionNestLimit`
|The The limit value for reflection nesting +
[.small]#*Example:*# +
`ReflectionNestLimit = 4` [.small .blue]#*[Default]*#

|`NonOutputProperties` +
[.small .blue]#Renamed since 2.0.0# +
 +
[.small]#`NonPrintProperties`# +
[.small .blue]#Deprecated since 2.0.0#
|Properties and fields not to be output value +
[.small]#*Example (One value):*# +
`NonOutputProperties = DebugTraceExample.Node.Parent` +
[.small]#*Example (Multiple values):*# +
`NonOutputProperties = \` +
  `DebugTraceExample.Node.Parent,\` +
  `DebugTraceExample.Node.Left,\` +
  `DebugTraceExample.Node.Right` +
[.small]#*format:*# +
`<full class name>.<property or field name>` +
[.small .blue]#No default value#

|`DefaultNameSpace`
|The default namespace of your C# source +
[.small]#*Example:*# +
`DefaultNameSpace = DebugTraceExample` +
[.small .blue]#No default value#

|`DefaultNameSpaceString`
|The string replacing the default namespace part +
[.small]#*Example:*# +
`DefaultNameSpaceString = \...` [.small .blue]#*[Default]*#

|`ReflectionClasses`
|Classe names that output content by reflection even if `ToString` method is implemented
[.small]#*Example (One value):*# +
`ReflectionClasses = DebugTraceExample.Point` +
[.small]#*Example (Multiple values):*# +
`ReflectionClasses = \` +
  `DebugTraceExample.Point,\` +
  `DebugTraceExample.Rectangle` +
[.small .blue]#No default value#

|`OutputNonPublicFields`
|If `true`, outputs the contents by reflection even for fields which are not `public` +
[.small]#*Examples:*# +
`OutputNonPublicFields = true` +
`OutputNonPublicFields = false` [.small .blue]#*[Default]*#

|`OutputNonPublicProperties`
|If `true`, outputs the contents by reflection even for properties which are not `public` +
[.small]#*Examples:*# +
`OutputNonPublicProperties = true` +
`OutputNonPublicProperties = false` [.small .blue]#*[Default]*#

|===

==== 7.1. Adding *DebugTrace.properties* file

You can add the `DebugTrace.properties` file to your projects in the following steps.

1. Select `Add` - `New Item ...` from the context menu of the project.

1. Select `Text File` in the dialog window, set the `Name:` to `DebugTrace.properties` and click `Add` button.

1. Select `Properties` from context menu of the added `DebugTrace.properties`.

1. Change setting of `Copy to Output Directory` in the `*Advanced*` section of the `Properties` to `Copy if newer` or `Copy always`.


==== 7.2. *NonOutputProperties*, *NonOutputString*

DebugTrace use reflection to output object contents if the `ToString` method is not implemented.
If there are other object references, the contents of objects are also output.
However, if there is circular reference, it will automatically detect and suspend output.
You can suppress output by specifying the `NonOutputProperties` property and
can specify multiple values of this property separated by commas.  
The value of the property specified by `NonOutputProperties` are output as the string specified by `NonOutputString` (default: `\***`).

.Example of NonOutputProperties
----
NonOutputProperties = DebugTraceExample.Node.Parent
----

.Example of NonOutputProperties (Multiple specifications)
----
NonOutputProperties = \
    DebugTraceExample.Node.Parent,\
    DebugTraceExample.Node.Left,\
    DebugTraceExample.Node.Right
----

=== 8. Examples of using logging libraries

You can output logs using the following libraries besides console output.

[options="header", cols="3,5,4", width="70%"]
.logging Libraries
|===
   ^s|Library Name ^s|Required package                          ^s|Target Framework
     |log4net        |DebugTrace.Log4net                          |.NET Framework 4.7
.2+.^|NLog           |DebugTrace.NLog [.small .blue]#since 1.6.0# |.NET Standard 2.0
                     |DebugTrace.NLog [.small .blue]#before 1.6.0#|.NET Framework 4.7
|===

To use them, add the above package from NuGet.

The logger name of DebugTrace is `DebugTrace`.   

==== 8-1. log4net

[source,properties]
.Example of DebugTrace.properties
----
# DebugTrace.properties
Logger = Log4net
----

[source,csharp]
.Additional example of AssemblyInfo.cs
----
[assembly: log4net.Config.XmlConfigurator(ConfigFile=@"Log4net.config", Watch=true)]
----

[source,xml]
.Example of Log4net.config
----
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <log4net>
    <appender name="A" type="log4net.Appender.FileAppender">
      <File value="C:/Logs/DebugTrace/Log4net.log" />
      <AppendToFile value="true" />
      <ImmediateFlush value="true" />
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <layout type="log4net.Layout.PatternLayout">
        <ConversionPattern value="%date [%thread] %-5level %logger %message%n" />
      </layout>
    </appender>
    <root>
      <level value="DEBUG" />
      <appender-ref ref="A" />
    </root>
  </log4net>
</configuration>
----

==== 8-2. NLog

[source,properties]
.Example of DebugTrace.properties
----
# DebugTrace.properties
Logger = NLog
----

[source,xml]
.Example of NLog.config
----
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="C:/Logs/DebugTrace/NLog-internal.log">
  <targets>
    <target xsi:type="File" name="f" fileName="C:/Logs/DebugTrace/NLog.log" encoding="utf-8"
            layout="${longdate} [${threadid}] ${uppercase:${level}} ${logger} ${message}" />
  </targets>
  <rules>
    <logger name="*" minlevel="Debug" writeTo="f" />
  </rules>
</nlog>
----

=== 9. License

link:LICENSE[The MIT License (MIT)]

=== 10. Documents

https://masatokokubo.github.io/DebugTrace-net/index.html[API Specification]

=== 11. Release Notes

==== DebugTrace-net 2.0.2 [.small .gray]#- July 12, 2020#

* Improved the line break handling of data output.

==== DebugTrace-net 2.0.1 [.small .gray]#- May 16, 2020#

* Improved the line break handling of data output.

==== DebugTrace-net 2.0.0 [.small .gray]#- April 4, 2020#

* Changed the supported framework to *.NET Core 3.1* from .NET Standard 2.0.

* Add following properties specified in DebugTrace.properties.
  ** `MinimumOutputCount` - The minimum value to output the number of elements of collection (Default: 5)
  ** `MinimumOutputLength` - The minimum value to output the length of string (Default: 5)

* Changed following property names specified in DebugTrace.properties. However, you can specify the previous names for compatibility.
  ** `EnterFormat` <- `EnterString`
  ** `LeaveFormat` <- `LeaveString`
  ** `IndentString` <- `CodeIndentString`
  ** `NonOutputString` <- `NonPrintString`
  ** `LengthFormat` <- `StringLengthFormat`
  ** `MaximumDataOutputWidth` <- `MaxDataOutputWidth`
  ** `NonOutputProperties` <- `NonPrintProperties`

* Improvement
  ** Speed up by changing the algorithm of line break detection.

==== DebugTrace-net 1.6.0 [.small .gray]#- March 24, 2019#

* Add following loggers.
  ** Diagnostics+Debug
  ** Diagnostics+Trace

* Add `PrintStack(int)` method to `TraceBase` class.

==== DebugTrace-net 1.5.4 [.small .gray]#- February 11, 2019#

* Change of `Print` method
  ** Outputs " enum" before the type name. +
    e.g. `v = enum Fruits Apple`

* Improvement of `Print` method
  ** Outputs the type name before the property or field name if the value type is different from the property or field type.

==== DebugTrace-net 1.5.3 [.small .gray]#- February 3, 2019#

* Improvements of `Print` method
  ** Outputs `struct` after the type name. +
    e.g. `v = Point struct {X: 1, Y: 2}`
  ** Outputs `enum` after the type name. +
    e.g. `v = Fruits enum Apple`

==== DebugTrace-net 1.5.2 [.small .gray]#- January 28, 2019#

* Add `Trace_` property to `CSharp` and `VisualBasic` classes.

==== DebugTrace-net 1.5.1 [.small .gray]#- December 15, 2018#

* Improvement
  ** Now outputs the length of strings.

* Add Properties in `DebugTrace.properties`
  ** `CountFormat`: The format string of the count of collections
  ** `StringLengthFormat`: The format string of the length of strings

==== DebugTrace.NLog 1.6.0 [.small .gray]#- November 18, 2018#
* Changed target framework from .NET Frameword 4.7 to .NET Standard 2.0.

==== DebugTrace-net 1.5.0 [.small .gray]#- October 28, 2018#
* Bug fix
  ** **_[Fixed]_** Throws a `NullReferenceException` when print a `Task` on `TraceBase.OutputNonPublicFields = true`.

* Improvement
  ** You can now specify multiple loggers in DebugTrace.properties. (e.g.: `Logger = Console+Out; Log4net`)

==== DebugTrace.Log4net 1.5.0 [.small .gray]#- October 28, 2018#
* This release is for DebugTrace-net 1.5.0.

==== DebugTrace.NLog 1.5.0 [.small .gray]#- October 28, 2018#
* Changes
  ** This release is for DebugTrace-net 1.5.0.
  ** Depends on Nlog 4.5.10.

[gray]#_(C) 2018 Masato Kokubo_#
