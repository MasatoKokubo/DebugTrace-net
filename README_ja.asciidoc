= DebugTrace-net 2.0

link:README.asciidoc[[English]]

*DebugTrace-net 2.0* は、.NETプログラムのデバッグ時にトレースログを出力するライブラリで、 https://docs.microsoft.com/ja-jp/dotnet/core/about[.NET Core 3.1]に対応しています。 (DebugTrace-net 2.0より前は https://docs.microsoft.com/ja-jp/dotnet/standard/net-standard[.NET Standard 2.0]に対応) +
メソッドの開始と終了箇所に `Trace.Enter()` および `Trace.Leave()` を埋め込む事で、開発中のプログラムの実行状況をログに出力する事ができます。

=== 1. 特徴

* 呼び出し元の *クラス名* 、 *メソッド名* 、 *ソースファイル名* および *行番号* を自動的に出力。
* メソッドやオブジェクトのネストで、ログを *自動的にインデント* 。
* 値の出力で *自動的に改行* 。
* *スレッドの切り替え時* に自動的にログを出力。
* `ToString` メソッドを実装していないクラスのオブジェクトでも *リフレクション* を使用して内容を出力。
* `DebugTrace.properties` で、出力内容のカスタマイズが可能。
* 依存するライブラリがない (コンソールに出力する場合)。
* 各種ロギング・ライブラリを使用可能。
  ** https://logging.apache.org/log4net/[log4net]
  ** http://nlog-project.org/[NLog]

=== 2. インストール
NuGetから `DebugTrace` パッケージを検索してインストールしてください。 +
https://logging.apache.org/log4net/[log4net]または http://nlog-project.org/[NLog]を使用してログを出力する場合は、 `DebugTrace.Log4net` または `DebugTrace.NLog` をインストールしてください。

=== 3. 使用方法

デバッグ対象および関連するメソッドに対して以下を行います。

. メソッドの先頭に `Trace.Enter()` を挿入する。
. メソッドの終了(または `return` 文の直前)に `Trace.Leave()` を挿入する。
. 必要に応じて変数をログに出力する `Trace.Print("foo", foo)` を挿入する。

以下は、DebugTrace-netを使用したC#, Visual Basicの例とそれを実行した際のログです。

[source,csharp]
.ReadmeExample.cs
----
using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using static DebugTrace.CSharp; // ToDo: Remove after debugging

namespace Readme {
    /// <summary>ReadmeExample1</summary>
    [TestClass]
    public class ReadmeExample1 {
        /// <summary>Example1</summary>
        [TestMethod]
        public void Example1() {
            Trace.Enter(); // ToDo: Remove after debugging

            var contacts = new [] {
                new Contact(1, "Akane" , "Apple", new DateTime(1991, 2, 3)),
                new Contact(2, "Yukari", "Apple", new DateTime(1992, 3, 4))
            };
            Trace.Print("contacts", contacts); // ToDo: Remove after debugging

            Trace.Leave(); // ToDo: Remove after debugging
        }

    }

    /// <summary>Entity</summary>
    public class Entity {
        public int ID;

        public Entity(int id) {
            ID = id;
        }
    }

    /// <summary>ContactBase</summary>
    public class ContactBase : Entity {
        public string FirstName;
        public string LastName;

        public ContactBase(int id, string firstName, string lastName) : base(id) {
            FirstName = firstName; LastName  = lastName ;
        }
    }

    /// <summary>Contact</summary>
    public class Contact : ContactBase {
        public DateTime Birthday;

        public Contact(int id, string firstName, string lastName, DateTime birthday) : base(id, firstName, lastName) {
            Birthday  = birthday ;
        }
    }
}
----

.コンソール出力 / C#
----
2020-07-12 16:55:12.409 [05] DebugTrace-net 2.0.2
2020-07-12 16:55:12.411 [05]   logger: DebugTrace.Console+Error
2020-07-12 16:55:12.411 [05]   properties file path: Z:\Develop\C#\DebugTrace\DebugTrace\DebugTraceTest\bin\Debug\netcoreapp3.1\DebugTrace.properties
2020-07-12 16:55:12.413 [05] 
2020-07-12 16:55:12.413 [05] ______________________________ Thread 5 ______________________________
2020-07-12 16:55:12.413 [05] 
2020-07-12 16:55:12.637 [05] Enter Readme.ReadmeExample1.Example1() (ReadmeExamples.cs:16)
2020-07-12 16:55:12.660 [05] | 
2020-07-12 16:55:12.660 [05] | contacts = Readme.Contact[2] {
2020-07-12 16:55:12.660 [05] |   Readme.Contact {
2020-07-12 16:55:12.660 [05] |     ____ Readme.Entity ____
2020-07-12 16:55:12.660 [05] |     ID: 1
2020-07-12 16:55:12.660 [05] |     ____ Readme.ContactBase ____
2020-07-12 16:55:12.660 [05] |     FirstName: (Length:5)"Akane", LastName: (Length:5)"Apple"
2020-07-12 16:55:12.660 [05] |     ____ Readme.Contact ____
2020-07-12 16:55:12.660 [05] |     Birthday: 1991-02-03 00:00:00.0000000
2020-07-12 16:55:12.660 [05] |   },
2020-07-12 16:55:12.660 [05] |   Readme.Contact {
2020-07-12 16:55:12.660 [05] |     ____ Readme.Entity ____
2020-07-12 16:55:12.660 [05] |     ID: 2
2020-07-12 16:55:12.660 [05] |     ____ Readme.ContactBase ____
2020-07-12 16:55:12.660 [05] |     FirstName: (Length:6)"Yukari", LastName: (Length:5)"Apple"
2020-07-12 16:55:12.660 [05] |     ____ Readme.Contact ____
2020-07-12 16:55:12.660 [05] |     Birthday: 1992-03-04 00:00:00.0000000
2020-07-12 16:55:12.660 [05] |   }
2020-07-12 16:55:12.660 [05] | } (ReadmeExamples.cs:22)
2020-07-12 16:55:12.661 [05] | 
2020-07-12 16:55:12.662 [05] Leave Readme.ReadmeExample1.Example1() (ReadmeExamples.cs:24) duration: 00:00:00.0226730
----

[source,vb.net]
.ReadmeExample.vb
----
Imports System.Threading
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports DebugTrace.VisualBasic ' for Debugging

Namespace Readme
    ''' <summary>ReadmeExample1</summary>
    <TestClass()>
    Public Class ReadmeExample1
        ''' <summary>Example1</summary>
        <TestMethod()>
        Public Sub Example1()
            Trace.Enter() ' for Debugging

            Dim contacts = New Contact() {
                New Contact(1, "Akane", "Apple", New DateTime(1991, 2, 3)),
                New Contact(2, "Yukari", "Apple", New DateTime(1992, 3, 4))
            }
            Trace.Print("contacts", contacts) ' for Debugging

            Trace.Leave() ' for Debugging
        End Sub
    End Class

    ''' <summary>Entity</summary>
    Public class Entity
        Public Property Id As Integer

        Public Sub New(id_ As Integer)
            Id = id_
        End Sub
    End Class

    ''' <summary>ContactBase</summary>
    public class ContactBase : Inherits Entity
        Public Property FirstName As String
        Public Property LastName As String

        Public Sub New(id_ As Integer, firstName_ As String, lastName_ As String)
            MyBase.New(id_)
            FirstName = firstName_ : LastName = lastName_
        End Sub
    End Class

    ''' <summary>Contact</summary>
    Public Class Contact : Inherits ContactBase
        Public Birthday As DateTime

        Public Sub New(id_ As Integer, firstName_ As String, lastName_ As String, birthday_ As DateTime)
            MyBase.New(id_, firstName_, lastName_)
            Birthday = birthday_
        End Sub
    End Class
End Namespace
----

.コンソール出力 / Visual Basic
----
2021-08-13 13:07:02.999 [05] DebugTrace-net 2.0.3
2021-08-13 13:07:03.001 [05]   properties file path: Z:\Develop\C#\DebugTrace\DebugTrace\DebugTraceTest\bin\Debug\netcoreapp3.1\DebugTrace.properties
2021-08-13 13:07:03.001 [05]   logger: DebugTrace.Console+Error
2021-08-13 13:07:03.001 [05] 
2021-08-13 13:07:03.001 [05] ______________________________ Thread 5 ______________________________
2021-08-13 13:07:03.001 [05] 
2021-08-13 13:07:03.041 [05] Enter Readme.ReadmeExample1.Example1() (ReadmeExamples.cs:16)
2021-08-13 13:07:03.049 [05] | 
2021-08-13 13:07:03.049 [05] | contacts = Readme.Contact[2] {
2021-08-13 13:07:03.049 [05] |   Readme.Contact {
2021-08-13 13:07:03.049 [05] |     ____ Readme.Entity ____
2021-08-13 13:07:03.049 [05] |     ID: 1
2021-08-13 13:07:03.049 [05] |     ____ Readme.ContactBase ____
2021-08-13 13:07:03.049 [05] |     FirstName: (Length:5)"Akane", LastName: (Length:5)"Apple"
2021-08-13 13:07:03.049 [05] |     ____ Readme.Contact ____
2021-08-13 13:07:03.049 [05] |     Birthday: 1991-02-03 00:00:00.0000000
2021-08-13 13:07:03.049 [05] |   },
2021-08-13 13:07:03.049 [05] |   Readme.Contact {
2021-08-13 13:07:03.049 [05] |     ____ Readme.Entity ____
2021-08-13 13:07:03.049 [05] |     ID: 2
2021-08-13 13:07:03.049 [05] |     ____ Readme.ContactBase ____
2021-08-13 13:07:03.049 [05] |     FirstName: (Length:6)"Yukari", LastName: (Length:5)"Apple"
2021-08-13 13:07:03.049 [05] |     ____ Readme.Contact ____
2021-08-13 13:07:03.049 [05] |     Birthday: 1992-03-04 00:00:00.0000000
2021-08-13 13:07:03.049 [05] |   }
2021-08-13 13:07:03.049 [05] | } (ReadmeExamples.cs:22)
2021-08-13 13:07:03.050 [05] | 
2021-08-13 13:07:03.050 [05] Leave Readme.ReadmeExample1.Example1() (ReadmeExamples.cs:24) duration: 00:00:00.0086104
----

==== 3.1 using System.Diagnostics(Imports System.Diagnostics)を行っている場合

`System.Diagnostics` 名前空間を `using`(`Imports`) している場合は、 `DebugTrace.CSharp.Trace`(`DebugTrace.VisualBaisc.Trace`) プロパティと `System.Diagnostics.Trace` クラスが重なるため、`Trace` プロパティの代わりに `Trace_` プロパティを使用してください。 +

[source,csharp]
.ReadmeExample.cs
----
using System.Diagnostics;
using static DebugTrace.CSharp; // ToDo: Remove after debugging

namespace Readme {
    public class ReadmeExample {
        public static void Main(string[] args) {
            Trace_.Enter(); // ToDo: Remove after debugging
----

[source,vb.net]
.ReadmeExample.vb
----
Imports System.Diagnostics
Imports DebugTrace.VisualBasic ' for Debugging

Namespace Global.Readme
    Public Class ReadmeExample
        Public Shared Sub Main(args As String())
            Trace_.Enter() ' for Debugging
----

=== 4. インタフェース、クラス

主に以下のインタフェース、クラスがあります。

[options="header", cols="3,3,4", width="90%"]
.インタフェース、クラス
|===
^s|名 前 ^s|スーパークラス、実装するインタフェース  ^s|説 明
  |`DebugTrace.ITrace`       |_なし_                  |Trace処理のインタフェース
  |`DebugTrace.TraceBase`    |`DebugTrace.ITrace`     |Trace処理のベースクラス
  |`DebugTrace.CSharp`       |`DebugTrace.Trace`      |C#用のTrace処理のクラス
  |`DebugTrace.VisualBasic`  |`DebugTrace.Trace`      |VisualBasic用のTrace処理のクラス
  |`DebugTrace.ILogger`      |_なし_                  |ログ出力のインタフェース
  |`DebugTrace.Console`      |`DebugTrace.ILogger`    |`DebugTrace.Console.Out` と `DebugTrace.Console.Error` の抽象スーパークラス
  |`DebugTrace.Console.Out`  |`DebugTrace.Console`    |ログを標準出力に出力するクラス
  |`DebugTrace.Console.Error`|`DebugTrace.Console`    |ログを標準エラー出力に出力するクラス
  |`DebugTrace.Diagnostics` +
[.small]#ver. 1.6.0より#|`DebugTrace.ILogger`    |`DebugTrace.Diagnostics.Debug` と `DebugTrace.Diagnostics.Trace` の抽象スーパークラス
  |`DebugTrace.Diagnostics.Debug` +
[.small]#ver. 1.6.0より#|`DebugTrace.Diagnostics`|ログを `System.Diagnostics.Debug` を使用して出力するクラス
  |`DebugTrace.Diagnostics.Trace` +
[.small]#ver. 1.6.0より#|`DebugTrace.Diagnostics`|ログを `System.Diagnostics.Trace` を使用して出力するクラス
|===

=== 5. DebugTrace.CSharpおよびDebugTrace.VisualBasicクラスのプロパティ

`DebugTrace.CSharp` クラスと `DebugTrace.VisualBasic` クラスには自身の型のインスタンスとして `Trace` および `Trace_` プロパティがあります。

=== 6. ITraceインタフェースのプロパティおよびメソッド

以下のプロパティおよびメソッドがあります。

[options="header", cols="1,5", width="70%"]
.プロパティ
|===

^s|名 前 ^s|説 明
|`IsEnabled`
|ログ出力が有効なら `true` 、そうでなければ `false`  (`get` のみ)

|`LastLog`
|最後に出力したログ文字列 (`get` のみ)

|===

[options="header", cols="1,4,2,3", width="100%"]
.メソッド
|===
^s|名 前 ^s|引 数 ^s|戻り値 ^s|説 明

|`ResetNest`
|なし
|なし
|現在のスレッドのネストレベルを初期化する

|`Enter`
|なし
|`int` スレッドID
|メソッドの開始をログに出力する

|`Leave`
|`int threadId`: スレッドID (デフォルト: `-1`)
|なし
|メソッドの終了をログに出力する

|`Print`
|`string message`: メッセージ
|なし
|メッセージをログに出力する

|`Print`
|`Func<string> messageSupplier`: メッセージを返す関数
|なし
|`messageSupplier` からメッセージを取得してログに出力する

|`Print`
|`string name`: 値の名前 +
`object value`: 値
|なし
|`<値の名前> = <値>` +
の形式でログに出力する

|`Print`
|`string name`: 値の名前 +
`Func<object> valueSupplier`: 値を返す関数
|なし
|`valueSupplier` から値を取得して +
`<値の名前> = <値>` +
の形式でログに出力する


|`PrintStack` +
[.small]#ver. 1.6.0より#
|`int maxCount`: 出力するスタック要素の最大数
|なし
|コールスタックをログに出力する

|===

=== 7. *DebugTrace.properties* ファイルのプロパティ

DebugTrace は、カレントディレクトリにある `DebugTrace.properties` ファイルを起動時に読み込みます。 +
`DebugTrace.properties` ファイルでは以下のプロパティを指定できます。

[options="header", cols="2,8", width="100%"]
.DebugTrace.properties
|===
^s|プロパティ名 ^s|説 明
|`Logger`
| DebugTrace が使用するロガー +
[.small]#*設定例:*# +
`Logger = Console+Out` [.small]#- コンソール(標準出力)へ出力# + 
`Logger = Console+Error` [.small]#- コンソール(標準エラー出力)へ出力# [.small]#*[デフォルト]*# + 
`Logger = Diagnostics+Debug` [.small]#- System.Diagnostics.Debugクラスを使用して出力 - ver. 1.6.0より# +
`Logger = Diagnostics+Trace` [.small]#- System.Diagnostics.Traceクラスを使用して出力 - ver. 1.6.0より# +
`Logger = Log4net` [.small]#- log4netを使用して出力# + 
`Logger = NLog` [.small]#- NLogを使用して出力# +
`Logger = NLog` [.small]#- NLogを使用して出力# +
[.small]#*設定例(複数):*# [.small]#ver. 1.5.0より# +
`Logger = Console+Out; Log4net` [.small]#- コンソール(標準出力)およびlog4netを使用して出力#

|`LogLevel`
|出力する際に使用するログレベル +
[.small]#*Log4netを使用する際の設定例:*# +
`LogLevel = All` +
`LogLevel = Finest` +
`LogLevel = Verbose` +
`LogLevel = Finer` +
`LogLevel = Trace` +
`LogLevel = Fine` +
`LogLevel = Debug`  [.small]#*[デフォルト]*# +
`LogLevel = Info` +
`LogLevel = Notice` +
`LogLevel = Warn` +
`LogLevel = Error` +
`LogLevel = Severe` +
`LogLevel = Critical` +
`LogLevel = Alert` +
`LogLevel = Fatal` +
`LogLevel = Emergency` +
`LogLevel = Off` +
[.small]#*NLogを使用する際の設定例:*# +
`LogLevel = Trace` +
`LogLevel = Debug`  [.small]#*[デフォルト]*# +
`LogLevel = Info` +
`LogLevel = Warn` +
`LogLevel = Error` +
`LogLevel = Fatal` +
`LogLevel = Off` +
[.small]#*Log4netとNLogを同時使用する際の設定例:*#  [.small]#(Logger = Log4net; NLog)# +
`LogLevel = Debug` [.small]#- Log4netとNLogの両方にDebugレベルで出力# +
`LogLevel = Finer; Trace` [.small]#- Log4netではFinerレベル、NLogではTraceレベルで出力 - ver. 1.5.0より#

|`EnterFormat` +
[.small]#ver. 2.0.0より名称変更# +
 +
[.small]#`EnterString`# +
[.small]#ver. 2.0.0より非推奨#
|メソッドに入る際に出力するログのフォーマット文字列 +
[.small]#*設定例:*# +
`EnterFormat = 開始 {0}.{1} ({2}:{3:D})` [.small]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
`{0}`: クラス名 +
`{1}`: メソッド名 +
`{2}`: ファイル名 +
`{3}`: 行番号

|`LeaveFormat` +
[.small]#ver. 2.0.0より名称変更# +
 +
[.small]#`LeaveString`# +
[.small]#ver. 2.0.0より非推奨#
|メソッドから出る際のログ出力のフォーマット文字列 +
[.small]#*設定例:*# +
`LeaveFormat = 終了 {0}.{1} ({2}:{3:D}) time: {4}` [.small]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
`{0}`: クラス名 +
`{1}`: メソッド名 +
`{2}`: ファイル名 +
`{3}`: 行番号 +
`{4}`: 対応する `Enter` メソッドを呼び出してからの時間

|`ThreadBoundaryFormat` +
[.small]#ver. 2.0.0より名称変更# +
 +
[.small]#`ThreadBoundaryString`# +
[.small]#ver. 2.0.0より非推奨#
|スレッド境界のログ出力の文字列フォーマット +
[.small]#*設定例:*# +
[.small]#`ThreadBoundaryFormat = \____\__\__\__\__\__\__\__\__\__\__\__\__\__ Thread {0} \__\__\__\__\__\__\__\__\__\__\__\__\__\____`# +
[.small]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
`{0}`: スレッドID

|`ClassBoundaryFormat` +
[.small]#ver. 2.0.0より名称変更# +
 +
[.small]#`ClassBoundaryString`# +
[.small]#ver. 2.0.0より非推奨#
|クラス境界のログ出力の文字列フォーマット +
[.small]#*設定例:*# +
`ClassBoundaryFormat = \\____ {0} \____` [.small]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
`{0}`: クラス名

|`IndentString` +
[.small]#ver. 2.0.0より名称変更# +
 +
[.small]#`CodeIndentString`# +
[.small]#ver. 2.0.0より非推奨#
|コードのインデント文字列 +
[.small]#*設定例:*# +
`IndentString = &#x7c;\s` [.small]#*[デフォルト]*# +
[.small]#`\s` は空白文字に置き換えられる#

|`DataIndentString`
|データのインデント 文字列 +
[.small]#*設定例:*# +
`DataIndentString = \s\s` [.small]#*[デフォルト]*# +
[.small]#`\s` は空白文字に置き換えられる#

|`gen`
|制限を超えた場合に出力する文字列 +
[.small]#*設定例:*# +
`LimitString = \...` [.small]#*[デフォルト]*# +

|`NonOutputString` +
[.small]#ver. 2.0.0より名称変更# +
 +
[.small]#`NonPrintString`# +
[.small]#ver. 2.0.0より非推奨#
|値を出力しない場合に代わりに出力する文字列 +
[.small]#*設定例:*# +
NonOutputString = `\***` [.small]#*[デフォルト]*#

|`CyclicReferenceString`
|循環参照している場合に出力する文字列 +
[.small]#*設定例:*# +
`CyclicReferenceString = \*\** Cyclic Reference \***` [.small]#*[デフォルト]*#

|`VarNameValueSeparator`
|変数名と値のセパレータ文字列 +
[.small]#*設定例:*# +
`VarNameValueSeparator = \s=\s` [.small]#*[デフォルト]*# +
[.small]#`\s` は空白文字に置き換えられる#

|`KeyValueSeparator`
|辞書のキーと値およびプロパティ/フィールド名と値のセパレータ文字列 +
[.small]#*設定例:*# +
`KeyValueSeparator = :\s` [.small]#*[デフォルト]*# +
[.small]#`\s` は空白文字に置き換えられる#

|`PrintSuffixFormat`
|`print` メソッドで付加される文字列のフォーマット +
[.small]#*設定例:*# +
`PrintSuffixFormat = \s({2}:{3:D})` [.small]#*[デフォルト]*# +
[.small]#`\s` は空白文字に置き換えられる# +
[.small]#*パラメータ:*# +
`{0}`: 呼出側のクラス名 +
`{1}`: 呼出側のメソッド名 +
`{2}`: 呼出側のファイル名 +
`{3}`: 呼出側の行番号

|`CountFormat` +
[.small]#ver. 1.5.1より# 
|コレクションの要素数のフォーマット +
[.small]#*設定例:*# +
`CountFormat = \sCount:{0}` [.small]#*[デフォルト]*# +
[.small]#*Parameter:*# +
`{0}`: 要素数

|`MinimumOutputCount` +
[.small]#ver. 2.0.0より# 
|コレクションの要素数を出力する最小値 +
[.small]#*設定例:*# +
`MinimumOutputCount = 5` [.small]#*[デフォルト]*#

|`LengthFormat` +
[.small]#ver. 2.0.0より名称変更#
 +
[.small]#`StringLengthFormat`# +
[.small]#ver. 1.5.1より# +
[.small]#ver. 2.0.0より非推奨#
|文字列長のフォーマット +
[.small]#*設定例:*# +
`LengthFormat = (Length:{0})` [.small]#*[デフォルト]*# +
[.small]#*Parameter:*# +
`{0}`: 文字列長

|`MinimumOutputLength` +
[.small]#ver. 2.0.0より# 
|文字列長を出力する最小値 +
[.small]#*設定例:*# +
`MinimumOutputLength = 5` [.small]#*[Default]*#

|`DateTimeFormat`
|日時のフォーマット +
[.small]#*設定例:*# +
`DateTimeFormat = {0:yyyy-MM-dd HH:mm:ss.fffffffK}` [.small]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
`{0}`: `DateTime` オブジェクト

|`LogDateTimeFormat`
|`logger` が `Console+Out`, `Console+Error`, `Diagnostics+Debug` および `Diagnostics+Trace` の場合のログの日時のフォーマット +
[.small]#*設定例:*# +
`LogDateTimeFormat = {0:yyyy-MM-dd HH:mm:ss.fff} [{1:D2}] {2}` [.small]#*[デフォルト]*# +
[.small]#*パラメータ:*# +
`{0}`: ログの出力日時 +
`{1}`: スレッドID +
`{2}`: ログ内容

|`MaximumDataOutputWidth` +
[.small]#ver. 2.0.0より名称変更# +
 +
[.small]#`MaxDataOutputWidth`# +
[.small]#ver. 2.0.0より非推奨#
|データの出力幅の最大値 +
[.small]#*設定例:*# +
`MaximumDataOutputWidth = 70` [.small]#*[デフォルト]*#

|`CollectionLimit`
|コレクションの要素の出力数の制限値 +
[.small]#*設定例:*# +
`CollectionLimit = 512` [.small]#*[デフォルト]*#

|`StringLimit`
|文字列の出力文字数の制限値 +
[.small]#*設定例:*# +
`StringLimit = 8192` [.small]#*[デフォルト]*#

|`ReflectionNestLimit`
|リフレクションのネスト数の制限値 +
[.small]#*設定例:*# +
`ReflectionNestLimit = 4` [.small]#*[デフォルト]*#

|`NonOutputProperties` +
[.small]#ver. 2.0.0より名称変更# +
 +
[.small]#`NonPrintProperties`# +
[.small]#ver. 2.0.0より非推奨#
|出力しないプロパティ名およびフィールド名の配列 +
[.small]#*設定例(1つ):*# +
`NonOutputProperties = DebugTraceExample.Node.Parent` +
[.small]#*設定例(複数):*# +
`NonOutputProperties = \` +
  `DebugTraceExample.Node.Parent,\` +
  `DebugTraceExample.Node.Left,\` +
  `DebugTraceExample.Node.Right` +
[.small]#デフォルトはなし# +
[.small]#*値のフォーマット:*# +
`<フルクラス名>.<プロパティ名またはフィールド名>`

|`DefaultNameSpace`
|デフォルトの名前空間 +
[.small]#*設定例:*# +
`DefaultNameSpace = DebugTraceExample` +
[.small]#デフォルトはなし#

|`DefaultNameSpaceString` +
|デフォルトの名前空間を置き換える文字列 +
[.small]#*設定例:*# +
DefaultNameSpaceString = `\...` [.small]#*[デフォルト]*#

|`ReflectionClasses`
|`ToString` メソッドを実装していてもリフレクションで内容を出力するクラス名のセット +
[.small]#*設定例(1つ):*# +
`ReflectionClasses = DebugTraceExample.Point` +
[.small]#*設定例(複数):*# +
`ReflectionClasses = \` +
  `DebugTraceExample.Point,\` +
  `DebugTraceExample.Rectangle` +
[.small]#デフォルトはなし#

|`OutputNonPublicFields`
|`true` の場合、`public` ではないフィールドもリフレクションで内容を出力する +
[.small]#*設定例:*# +
`OutputNonPublicFields = true` +
`OutputNonPublicFields = false` [.small]#*[デフォルト]*#

|`OutputNonPublicProperties`
|`true` の場合、`public` ではないプロパティもリフレクションで内容を出力する +
[.small]#*設定例:*# +
`OutputNonPublicProperties = true` +
`OutputNonPublicProperties = false` [.small]#*[デフォルト]*#

|===

==== 7.1. DebugTrace.propertiesファイルの追加

以下の手順でプロジェクトに `DebugTrace.properties` ファイルを追加します。

. プロジェクトのコンテキストメニューから `追加` - `新しい項目...` を選択する。

. ダイアログで、 `テキスト ファイル` を選択し、名前を `DebugTrace.properties` にして `追加` ボタンをクリックする。 +

. 追加された `DebugTrace.properties` のコンテキストメニューから `プロパティ` を選択する。

. `プロパティ` の `*詳細*` セクションにある `出力ディレクトリにコピー` の設定値を `新しい場合はコピーする` または `常にコピーする` に変更する。

==== 7.2. *NonOutputProperties*, *NonOutputString*

DebugTrace は、 `ToString` メソッドが実装されていない場合は、リフレクションを使用してオブジェクト内容を出力します。
他のオブジェクトの参照があれば、そのオブジェクトの内容も出力します。
ただし循環参照がある場合は、自動的に検出して出力を中断します。  
`NonOutputProperties` プロパティを指定して出力を抑制する事もできます。
このプロパティの値は、カンマ区切りで複数指定できます。  
`NonOutputProperties` で指定されたプロパティの値は、 `NonOutputString` で指定された文字列(デフォルト: `\***`)で出力されます。

.NonOutputPropertiesの例
----
NonOutputProperties = DebugTraceExample.Node.Parent
----

.NonOutputProperties(複数指定)の例
----
NonOutputProperties = \
    DebugTraceExample.Node.Parent,\
    DebugTraceExample.Node.Left,\
    DebugTraceExample.Node.Right
----

=== 8. ロギング・ライブラリの使用

コンソール出力以外に以下のライブラリを使用してログ出力が可能です。

[options="header", cols="3,6,4", width="60%"]
.ロギング・ライブラリ
|===
   ^s|ライブラリ名 ^s|必要なパッケージ                               ^s|対象フレームワーク
     |log4net        |DebugTrace.Log4net                             |.NET Framework 4.7
.2+.^|NLog           |DebugTrace.NLog [.small]#ver. 1.6.0より#   |.NET Standard 2.0
                     |DebugTrace.NLog [.small]#ver. 1.6.0より前#|.NET Framework 4.7
|===

使用する場合は、上記パッケージをNuGetから追加してください。

ロギング・ライブラリを使用する際のDebugTraceのロガー名は、 `DebugTrace` です。

==== 8-1. log4net

[source,properties]
.DebugTrace.propertiesの例
----
# DebugTrace.properties
Logger = Log4net
----

[source,csharp]
.AssemblyInfo.csの追加例
----
[assembly: log4net.Config.XmlConfigurator(ConfigFile=@"Log4net.config", Watch=true)]
----

[source,xml]
.Log4net.configの例
----
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <log4net>
    <appender name="A" type="log4net.Appender.FileAppender">
      <File value="C:/Logs/DebugTrace/Log4net.log" />
      <AppendToFile value="true" />
      <ImmediateFlush value="true" />
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <layout type="log4net.Layout.PatternLayout">
        <ConversionPattern value="%date [%thread] %-5level %logger %message%n" />
      </layout>
    </appender>
    <root>
      <level value="DEBUG" />
      <appender-ref ref="A" />
    </root>
  </log4net>
</configuration>
----

==== 8-2. NLog

[source,properties]
.DebugTrace.propertiesの例
----
# DebugTrace.properties
Logger = NLog
----

[source,xml]
.NLog.configの例
----
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" internalLogFile="C:/Logs/DebugTrace/NLog-internal.log">
  <targets>
    <target xsi:type="File" name="f" fileName="C:/Logs/DebugTrace/NLog.log" encoding="utf-8"
            layout="${longdate} [${threadid}] ${uppercase:${level}} ${logger} ${message}" />
  </targets>
  <rules>
    <logger name="*" minlevel="Debug" writeTo="f" />
  </rules>
</nlog>
----

=== 9. ライセンス

link:LICENSE[MIT ライセンス(MIT)]

=== 10. ドキュメント

https://masatokokubo.github.io/DebugTrace-net/index.html[API仕様(英語)]

=== 11. リリースノート

==== DebugTrace-net 2.0.3 [.small .gray]#- 2021-08-13#

* データ出力の改行処理を改善。

==== DebugTrace-net 2.0.2 [.small .gray]#- 2020-07-12#

* データ出力の改行処理を改善。

==== DebugTrace-net 2.0.1 [.small .gray]#- 2020-05-16#

* データ出力の改行処理を改善。

==== DebugTrace-net 2.0.0 [.small .gray]#- 2020-04-26#

* 対応フレームワークを .NET Standard 2.0から *.NET Core 3.1* に変更。

* DebugTrace.propertiesで指定する以下のプロパティを追加
  ** `MinimumOutputCount` - コレクションの要素数を出力する最小値 (デフォルト: 5)
  ** `MinimumOutputLength` - 文字列長を出力する最小値 (デフォルト: 5)

* DebugTrace.propertiesで指定する以下のプロパティ名を変更 (互換性維持のため従来の名称も指定可能)
  ** `EnterFormat` <- `EnterString`
  ** `LeaveFormat` <- `LeaveString`
  ** `IndentString` <- `CodeIndentString`
  ** `NonOutputString` <- `NonPrintString`
  ** `LengthFormat` <- `StringLengthFormat`
  ** `MaximumDataOutputWidth` <- `MaxDataOutputWidth`
  ** `NonOutputProperties` <- `NonPrintProperties`

* 改善
  ** 改行の検出のアルゴリズムを変更して高速化。

==== DebugTrace-net 1.6.0 [.small .gray]#- 2019-03-24#

* 以下のロガーを追加。
  ** Diagnostics+Debug
  ** Diagnostics+Trace

* `TraceBase` クラスに `PrintStack(int)` メソッドを追加。

==== DebugTrace-net 1.5.4 [.small .gray]#- 2019-02-11#

* `Print` メソッドの変更
  ** 型名の前に `enum` の表示 +
    例: `v = enum Fruits Apple`

* `Print` メソッドの改善
  ** プロパティまたはフィールドの型とその値の型が異なる場合は、プロパティまたはフィールド名の前に型名を出力する。


==== DebugTrace-net 1.5.3 [.small .gray]#- 2019-02-03#

* `Print` メソッドの改善
  ** 型名の後に `struct` の表示を追加。 +
    例: `v = Point struct {X: 1, Y: 2}`
  ** 型名の後に `enum` の表示を追加。 +
    例: `v = Fruits enum Apple`

==== DebugTrace-net 1.5.2 [.small .gray]#- 2019-01-28#

* `CSharp` クラスと `VisualBasic` クラスに `Trace_` プロパティを追加。

==== DebugTrace-net 1.5.1 [.small .gray]#- 2018-12-15#

* 改善
  ** 文字列の長さを出力するようになりました。

* DebugTrace.propertiesへの追加
  ** `CountFormat`: コレクションの要素数のフォーマット
  ** `StringLengthFormat`: 文字列長のフォーマット

==== DebugTrace.NLog 1.6.0 [.small .gray]#- 2018-11-18#
* 対応フレームワークを.NET Frameword 4.7から.NET Standard 2.0に変更。

==== DebugTrace-net 1.5.0 [.small .gray]#- 2018-10-28#
* バグ修正
  ** **_[修正済]_** `TraceBase.OutputNonPublicFields = true` の場合に `Task` を出力すると `NullReferenceException` がスローされる。

* 改善
  ** DebugTrace.propertiesで複数のロガーを指定できるようになりました。(例: `Logger = Console+Out; Log4net`)

==== DebugTrace.Log4net 1.5.0 [.small .gray]#- 2018-10-28#
* DebugTrace-net 1.5.0に対応するリリース

==== DebugTrace.NLog 1.5.0 [.small .gray]#- 2018-10-28#
* 変更
  ** DebugTrace-net 1.5.0に対応するリリース
  ** Nlog 4.5.10に依存

_(C) 2018 Masato Kokubo_
